/* ========================================================================
 * Copyright 2014 Arquidalgos
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Arquidalgos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.logic.ejb;

import co.edu.uniandes.csw.Arquidalgos.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.Arquidalgos.entidad.logic.dto.EntidadDTO;
import co.edu.uniandes.csw.Arquidalgos.entidad.persistence.api.IEntidadPersistence;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.logic.dto.HazTuVueltaDTO;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.logic.api._IHazTuVueltaMasterLogicService;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.logic.dto.HazTuVueltaMasterDTO;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.persistence.api.IHazTuVueltaMasterPersistence;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.persistence.entity.HazTuVueltausuariosHtvEntity;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.master.persistence.entity.HazTuVueltatiendaOPEntity;
import co.edu.uniandes.csw.Arquidalgos.haztuvuelta.persistence.api.IHazTuVueltaPersistence;
import javax.inject.Inject;

public abstract class _HazTuVueltaMasterLogicService implements _IHazTuVueltaMasterLogicService {

    @Inject
    protected IHazTuVueltaPersistence haztuvueltaPersistance;
    @Inject
    protected IHazTuVueltaMasterPersistence haztuvueltaMasterPersistance;
    @Inject
    protected IEntidadPersistence entidadPersistance;
    @Inject
    protected IUsuarioPersistence usuarioPersistance;

    public HazTuVueltaMasterDTO createMasterHazTuVuelta(HazTuVueltaMasterDTO haztuvuelta) {
        HazTuVueltaDTO persistedHazTuVueltaDTO = haztuvueltaPersistance.createHazTuVuelta(haztuvuelta.getHazTuVueltaEntity());
        if (haztuvuelta.getCreateusuariosHtv() != null) {
            for (UsuarioDTO usuarioDTO : haztuvuelta.getCreateusuariosHtv()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                HazTuVueltausuariosHtvEntity haztuvueltaUsuarioEntity = new HazTuVueltausuariosHtvEntity(persistedHazTuVueltaDTO.getId(), createdUsuarioDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltausuariosHtvEntity(haztuvueltaUsuarioEntity);
            }
        }
        if (haztuvuelta.getCreatetiendaOP() != null) {
            for (EntidadDTO entidadDTO : haztuvuelta.getCreatetiendaOP()) {
                EntidadDTO createdEntidadDTO = entidadPersistance.createEntidad(entidadDTO);
                HazTuVueltatiendaOPEntity haztuvueltaEntidadEntity = new HazTuVueltatiendaOPEntity(persistedHazTuVueltaDTO.getId(), createdEntidadDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltatiendaOPEntity(haztuvueltaEntidadEntity);
            }
        }
        // update usuario
        if (haztuvuelta.getUpdateusuariosHtv() != null) {
            for (UsuarioDTO usuarioDTO : haztuvuelta.getUpdateusuariosHtv()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
                HazTuVueltausuariosHtvEntity haztuvueltaUsuarioEntity = new HazTuVueltausuariosHtvEntity(persistedHazTuVueltaDTO.getId(), usuarioDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltausuariosHtvEntity(haztuvueltaUsuarioEntity);
            }
        }
        // update entidad
        if (haztuvuelta.getUpdatetiendaOP() != null) {
            for (EntidadDTO entidadDTO : haztuvuelta.getUpdatetiendaOP()) {
                entidadPersistance.updateEntidad(entidadDTO);
                HazTuVueltatiendaOPEntity haztuvueltaEntidadEntity = new HazTuVueltatiendaOPEntity(persistedHazTuVueltaDTO.getId(), entidadDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltatiendaOPEntity(haztuvueltaEntidadEntity);
            }
        }
        return haztuvuelta;
    }

    public HazTuVueltaMasterDTO getMasterHazTuVuelta(Long id) {
        return haztuvueltaMasterPersistance.getHazTuVuelta(id);
    }

    public void deleteMasterHazTuVuelta(Long id) {
        haztuvueltaPersistance.deleteHazTuVuelta(id);
    }

    public void updateMasterHazTuVuelta(HazTuVueltaMasterDTO haztuvuelta) {
        haztuvueltaPersistance.updateHazTuVuelta(haztuvuelta.getHazTuVueltaEntity());

        //---- FOR RELATIONSHIP
        // persist new usuario
        if (haztuvuelta.getCreateusuariosHtv() != null) {
            for (UsuarioDTO usuarioDTO : haztuvuelta.getCreateusuariosHtv()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                HazTuVueltausuariosHtvEntity haztuvueltaUsuarioEntity = new HazTuVueltausuariosHtvEntity(haztuvuelta.getHazTuVueltaEntity().getId(), createdUsuarioDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltausuariosHtvEntity(haztuvueltaUsuarioEntity);
            }
        }
        // update usuario
        if (haztuvuelta.getUpdateusuariosHtv() != null) {
            for (UsuarioDTO usuarioDTO : haztuvuelta.getUpdateusuariosHtv()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
            }
        }
        // delete usuario
        if (haztuvuelta.getDeleteusuariosHtv() != null) {
            for (UsuarioDTO usuarioDTO : haztuvuelta.getDeleteusuariosHtv()) {
                haztuvueltaMasterPersistance.deleteHazTuVueltausuariosHtvEntity(haztuvuelta.getHazTuVueltaEntity().getId(), usuarioDTO.getId());
                usuarioPersistance.deleteUsuario(usuarioDTO.getId());
            }
        }
        // persist new entidad
        if (haztuvuelta.getCreatetiendaOP() != null) {
            for (EntidadDTO entidadDTO : haztuvuelta.getCreatetiendaOP()) {
                EntidadDTO createdEntidadDTO = entidadPersistance.createEntidad(entidadDTO);
                HazTuVueltatiendaOPEntity haztuvueltaEntidadEntity = new HazTuVueltatiendaOPEntity(haztuvuelta.getHazTuVueltaEntity().getId(), createdEntidadDTO.getId());
                haztuvueltaMasterPersistance.createHazTuVueltatiendaOPEntity(haztuvueltaEntidadEntity);
            }
        }
        // update entidad
        if (haztuvuelta.getUpdatetiendaOP() != null) {
            for (EntidadDTO entidadDTO : haztuvuelta.getUpdatetiendaOP()) {
                entidadPersistance.updateEntidad(entidadDTO);
            }
        }
        // delete entidad
        if (haztuvuelta.getDeletetiendaOP() != null) {
            for (EntidadDTO entidadDTO : haztuvuelta.getDeletetiendaOP()) {
                haztuvueltaMasterPersistance.deleteHazTuVueltatiendaOPEntity(haztuvuelta.getHazTuVueltaEntity().getId(), entidadDTO.getId());
                entidadPersistance.deleteEntidad(entidadDTO.getId());
            }
        }
    }
}
