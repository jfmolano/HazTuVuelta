/* ========================================================================
 * Copyright 2014 Arquidalgos
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Arquidalgos

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.Arquidalgos.sede.persistence;

import co.edu.uniandes.csw.Arquidalgos.cita.logic.dto.CitaDTO;
import co.edu.uniandes.csw.Arquidalgos.cita.persistence.api.ICitaPersistence;
import co.edu.uniandes.csw.Arquidalgos.cita.persistence.converter.CitaConverter;
import co.edu.uniandes.csw.Arquidalgos.cita.persistence.entity.CitaEntity;
import co.edu.uniandes.csw.Arquidalgos.sede.logic.dto.SedeDTO;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;

import co.edu.uniandes.csw.Arquidalgos.sede.persistence.api.ISedePersistence;
import co.edu.uniandes.csw.Arquidalgos.turno.logic.dto.TurnoDTO;
import co.edu.uniandes.csw.Arquidalgos.turno.persistence.api.ITurnoPersistence;
import co.edu.uniandes.csw.Arquidalgos.turno.persistence.converter.TurnoConverter;
import co.edu.uniandes.csw.Arquidalgos.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.master.logic.dto.UsuarioMasterDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.master.persistence.UsuarioMasterPersistence;
import co.edu.uniandes.csw.Arquidalgos.usuario.master.persistence.api.IUsuarioMasterPersistence;
import co.edu.uniandes.csw.Arquidalgos.usuario.master.persistence.api._IUsuarioMasterPersistence;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.converter.UsuarioConverter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.inject.Inject;
import javax.persistence.Query;
import utilidadesHTV.Tiempo;
import utilidadesHTV.ConstantesYMetodos;

@Default
@Stateless 
@LocalBean
public class SedePersistence extends _SedePersistence  implements ISedePersistence {

    @Inject
    private IUsuarioMasterPersistence usuarioMasterPersistance;
    
    @Inject
    private IUsuarioPersistence usuarioPersistance;
    
    @Inject
    private ICitaPersistence citaPersistance;
    
    @Inject
    private ITurnoPersistence turnoPersistence;
    
    
    /**
     * Mock, ensayo primer prototipo
     * @return 
     */
    public int aumentarTurno() {
        
        SedeDTO sedeActual = getSede(1L);
        
    
        sedeActual.setTurno(sedeActual.getTurno()+1);
        
        updateSede(sedeActual);
        
        return getSede(1L).getTurno();
    }

    /**
     * Mock, ensayo primer prototipo
     * @return 
     */
    public int turnoActual() {
        
        return getSede(1L).getTurno();
    }

    /**
     * Returno todos los turnos de la fila en el dia de hoy en la sede
     * @param idSede
     * @return 
     */
    public List <TurnoDTO> getTurnosSedeHoy (Long idSede){
        
        List < TurnoDTO> turnosSede = turnoPersistence.getTurnosSede(idSede);
        List < TurnoDTO> resp = new ArrayList<TurnoDTO>();
        Calendar calActual = new GregorianCalendar();
        calActual.setTime(Tiempo.getCurrentDate());
        
        for (TurnoDTO turno : turnosSede) {
            
            Calendar calTurno = new GregorianCalendar();
            calTurno.setTime(turno.getFechaTurno());
            if ( calActual.get(Calendar.YEAR)== calTurno.get(Calendar.YEAR) &&
                    calActual.get(Calendar.DAY_OF_YEAR) == calTurno.get(Calendar.DAY_OF_YEAR)){
                
                // Son el mismo dia
                
                resp.add(turno);               
            }
        }
        return resp;
    }
    
    /**
     * Asigna un nuevo turno al final de la fila de hoy en la cede dada, para el usuario dado
     * @param idSede
     * @param cedula
     * @return
     * @throws Exception 
     */
    //TODO Verificar si hay citas en espera que puedan ser asignadas después de mi
    public int asignarSiguienteTurno ( Long idSede, String cedula)throws Exception{
        
        
        // Verificar que exista usuario
        
        UsuarioDTO usuario = usuarioPersistance.buscarUsuarioCedula(cedula);
        
        
        if ( usuario == null){
            
            throw new Exception ("No existe un usuario con ese documento de identificación");

        }   
            
        List <TurnoDTO> turnosHoy = getTurnosSedeHoy(idSede);

        TurnoDTO nuevoTurno = new TurnoDTO();

        nuevoTurno.setFechaTurno(Tiempo.getCurrentDate());
        nuevoTurno.setHoraInicio(turnosHoy.get(turnosHoy.size()-1).getHoraFinal());
        nuevoTurno.setHoraFinal(new Date(nuevoTurno.getHoraInicio().getTime()
                +(ConstantesYMetodos.DURACION_APROX_TURNO_MILISEGUNDOS)));
        nuevoTurno.setSedeturnoId(idSede);
        nuevoTurno.setTurno(turnosHoy.size()+1);

        turnosHoy.add(nuevoTurno);

        int turnoAsignado = turnosHoy.size();
        
        // Relacionar turno y usuario

        List<TurnoDTO> turnoPersistir = new ArrayList<TurnoDTO>();
        turnoPersistir.add(nuevoTurno);
        UsuarioMasterDTO userMaster = new UsuarioMasterDTO();

        userMaster.setId(usuario.getId());
        userMaster.setListturnoUsuario(turnoPersistir);

        
        // Verificar si hay citas en espera, y añadirlas a la fila
        
         List <CitaDTO> citas = citaPersistance.darCitasAnterioresOYa(turnosHoy.get(turnosHoy.size()-1).getHoraFinal());
        
        for (CitaDTO cita : citas) {
            try {
                //Falta relacionar cita-turno-usuario
                cita.setEspera(false);
                asignarSiguienteTurno(idSede,usuarioMasterPersistance.getUsuarioCitaHoy(cita.getId()).getCedula());
                
            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(SedePersistence.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return turnoAsignado;        
            
    }

    /**
     * Método que se encarga de terminar el turno que se está atendiendo, y recalcular los tiempos de los otros turnos en fila
     * @param idSede 
     */
    public void atenderTurno(Long idSede){
        
        SedeDTO sede = getSede(idSede);
        int turnoActual = sede.getTurno();
        
        //Correr tiempos por si se demora menos/mas
        
        List <TurnoDTO> turnos = getTurnosSedeHoy(idSede);
        Date temp = Tiempo.getCurrentDate();
        for (int i = turnoActual; i < turnos.size(); i++) {
            
            TurnoDTO actual = turnos.get(i);
            actual.setHoraInicio(temp);
            actual.setHoraFinal(new Date(actual.getHoraInicio().getTime()+ConstantesYMetodos.DURACION_APROX_TURNO_MILISEGUNDOS));
            temp = actual.getHoraFinal();
        }
        // pasar todas las citas en espera a la fila, si se cumple
        
        List <CitaDTO> citas = citaPersistance.darCitasAnterioresOYa(turnos.get(turnos.size()-1).getHoraFinal());
        
        for (CitaDTO cita : citas) {
            try {
                //Falta relacionar cita-turno-usuario}
                cita.setEspera(false);
                asignarSiguienteTurno(idSede,usuarioMasterPersistance.getUsuarioCitaHoy(cita.getId()).getCedula());
                
            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(SedePersistence.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        sede.setTurno(turnoActual+1);     
                
    }

    /**
     * Ultimo turno de la fila
     * @param sede
     * @return 
     */
    public int darUltimoTurnoAsignado(Long sede) {
        
        return getTurnosSedeHoy(sede).size();
    }

    /**
     * Hora en la que inicia el último turno de la fila
     * @param idSede
     * @return 
     */
    public Date darUltimoInicioDeCita(Long idSede) {
    
        List <TurnoDTO> turnos = getTurnosSedeHoy(idSede);
        
        return turnos.get(turnos.size()-1).getHoraInicio();
    }

    /**
     * Ultimo turno que han atendido en la sede
     * @param idSede
     * @return 
     */
    public int darUltimoTurnoAtendido(Long idSede) {
       
        return getSede(idSede).getTurno();
    }
    
    /**
     * Hora aproximada en la se atiende al usuario con la cedula dada
     * @param cedula
     * @return
     * @throws Exception 
     */
    public Date darHoraAproximadaAtencion(String cedula) throws Exception{
    
        CitaDTO cita = usuarioMasterPersistance.getCitaUsuarioHoy(usuarioPersistance.buscarUsuarioCedula(cedula).getId());
        
        if ( cita != null){
        
            if ( cita.isEspera() ){

                return cita.getHoraIni();

            }
            else{

                Long inicioUltimoTurno = darUltimoInicioDeCita(cita.getSedecitaId()).getTime();
                int turnoActual = darUltimoTurnoAtendido(cita.getSedecitaId());

                return new Date(inicioUltimoTurno+(cita.getTurnoAsignado()-turnoActual)*ConstantesYMetodos.DURACION_APROX_TURNO_MILISEGUNDOS);

            } 
        
        }
        
        else {
            
            throw new Exception ( "El usuario con documento de identificación: "+cedula+" no tiene registrado un turno el dia de hoy");
        }
    }
    
   
    /**
     * Se le reserva una cita al usuario en el horario dado
     * @param nuevaCita TIENEN QUE PASARLE LA HORA INICIAL DEL RANGO, NO DEL PUESTO DE LA CITA EN EL RANGO
     * @param cedula
     * @throws Exception 
     */
    public void reservarCita(CitaDTO nuevaCita, String cedula) throws Exception {
        
        
        //TODO verificar cuando tiene sentido reservar la cita, y cuando no
        
        
        UsuarioDTO user = usuarioPersistance.buscarUsuarioCedula(cedula);
        
        if ( user == null){
            
            throw new Exception ("No existe un usuario con ese documento de identificación");
            
        }
        int cupoCitasHora = ConstantesYMetodos.RANGO_RESERVAR_TURNO_MIN/ConstantesYMetodos.DURACION_APROX_TURNO_MIN;

        // Verifica que no se pase el cupo máximo de citas que se pueden reservar a esa hora
        
               
        if ( citaPersistance.darCitasRango(nuevaCita.getHoraIni()).size()>= cupoCitasHora){

            throw new Exception("No se pueden reservar más turnos a esa hora");
        }
        
        Date horaFinUltimaCita = new Date(darUltimoInicioDeCita(nuevaCita.getSedecitaId()).getTime()+ConstantesYMetodos.DURACION_APROX_TURNO_MILISEGUNDOS);
        Calendar cHoraFin = new GregorianCalendar();
        cHoraFin.setTime(horaFinUltimaCita);
        
        Calendar cFinNuevaCita = new GregorianCalendar();
       
        cFinNuevaCita.setTime(new Date(nuevaCita.getHoraIni().getTime()+ConstantesYMetodos.RANGO_RESERVAR_TURNO_MILISEGUNDOS));
        
        // Verifica que todavia se pueda reservar una cita en ese rango, es decir, que el ultimo puesto de la fila vaya antes del fin del rango
        if ( cHoraFin.after(cFinNuevaCita) ){
            
            throw new Exception("No se pueden reservar turno a esa hora, reservar en otro rango de horas.");

        }
        
        Calendar cInicioNuevaCita = new GregorianCalendar();
        cInicioNuevaCita.setTime(nuevaCita.getHoraIni());
        
        // Si ya hay turnos en el rango, en lugar de reservar cita, se pide el turno siguiente
        if ( cHoraFin.after(cInicioNuevaCita)){
            
            asignarSiguienteTurno(nuevaCita.getSedecitaId(), cedula);
            
        }
        
        else{
            
            CitaDTO cita = new CitaDTO();
            cita.setEspera(true);
            cita.setFechaCita(Tiempo.getCurrentDate());
            
            // Verifica en que posición del rango se piensa asignar la cita
            List <CitaDTO> citasRango = citaPersistance.darCitasRango(nuevaCita.getHoraIni());
            
            if ( citasRango.size()<1){
                
                cita.setHoraIni(nuevaCita.getHoraIni());
            }
            else{
                
                cita.setHoraIni(citasRango.get(citasRango.size()-1).getHoraFin());
            }
            
            cita.setHoraFin(new Date (cita.getHoraIni().getTime()+ConstantesYMetodos.RANGO_RESERVAR_TURNO_MILISEGUNDOS));
            cita.setSedecitaId(nuevaCita.getSedecitaId());
            cita.setTurnoAsignado(-1);

            citaPersistance.createCita(cita);


             // Relacionar cita y usuario

            List<CitaDTO> citaPersistir = new ArrayList<CitaDTO>();
            citaPersistir.add(cita);
            UsuarioMasterDTO userMaster = new UsuarioMasterDTO();

            userMaster.setId(user.getId());
            userMaster.setListcitasUs(citaPersistir);
            
        }
    }

    /**
     * Retorna el turno que se está atendiendo actualmente en la sede
     * @param idSede
     * @return 
     */
    public int turnoActual(Long idSede) {
        
        return getSede(idSede).getTurno();
    }
    

}